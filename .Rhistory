CF <-c(ARN[j],ARN[j+1],ARN[j+2])
num2<-j+2
break
}else if(ARN[j]=="U" & ARN[j+1]=="A" & ARN[j+2]=="G"){
CF <-c(ARN[j],ARN[j+1],ARN[j+2])
num2<-j+2
break
}else if(ARN[j]=="U" & ARN[j+1]=="G" & ARN[j+2]=="A"){
CF <-c(ARN[j],ARN[j+1],ARN[j+2])
num2<-j+2
break
}
}
Prot<-c("")
for(k in num:num2){
Prot<-c(Prot,ARN[k])
Prot
}
Prot<-(Prot[-1])
print(CI)
print(CF)
return(Prot)
}
Marco<-Mar_lect(ARN)
n<-readline(prompt="Tamaño de la secuencia de ADN: ")
nucleotidos<-c("A","T","C","G")
ADN<-function(nucleotidos,n){
return(sample(nucleotidos,n,replace=TRUE))
}
ADN <- ADN(nucleotidos,n)
ADN
tamaño<-function(ADN){
print("La longitud de tu secuencia es: ")
return(length(ADN))
}
tamaño(ADN)
porcentaje<-function(ADN){
A<-0
T<-0
C<-0
G<-0
for(i in 1:length(ADN)){
if(ADN[i]=="A"){
A<-A+1
} else if(ADN[i]=="T"){
T<-T+1
} else if(ADN[i]=="G"){
G<-G+1
} else if(ADN[i]=="C"){
C<-C+1
}
}
print("El porcentaje de A es: ")
print(round((A/length(ADN))*100), digits=2)
print("El porcentaje de T es: ")
print(round((T/length(ADN))*100), digits=2)
print("El porcentaje de C es: ")
print(round((C/length(ADN))*100), digits=2)
print("El porcentaje de G es: ")
print(round((G/length(ADN))*100), digits=2)
}
print(ADN)
print(tamaño(ADN))
porcentaje(ADN)
porcentaje<-function(ADN){
A<-0
T<-0
C<-0
G<-0
for(i in 1:length(ADN)){
if(ADN[i]=="A"){
A<-A+1
} else if(ADN[i]=="T"){
T<-T+1
} else if(ADN[i]=="G"){
G<-G+1
} else if(ADN[i]=="C"){
C<-C+1
}
}
print("El porcentaje de A es: ")
print(round((A/length(ADN))*100), digits=2)
print("El porcentaje de T es: ")
print(round((T/length(ADN))*100), digits=2)
print("El porcentaje de C es: ")
print(round((C/length(ADN))*100), digits=2)
print("El porcentaje de G es: ")
print(round((G/length(ADN))*100), digits=2)
}
porcentaje(ADN)
inversa<- function(ADN){
hebra_inv<-c()
for(i in 0:length(ADN)-1){
inv<-(ADN[length(ADN)-i])
hebra_inv<-c(hebra_inv,inv)
}
hebra_inv<-hebra_inv[-c(1)]
return(hebra_inv)
}
ADN
inversa(ADN)
complementaria<-function(ADN){
hebra_compl<-c()
for(i in 1:length(ADN)){
if(ADN[i]=="A"){
nucl<-c("T")
}else if(ADN[i]=="C"){
nucl<-c("G")
}else if(ADN[i]=="G"){
nucl<-c("C")
}else if(ADN[i]=="T"){
nucl<-c("A")
}
hebra_compl<-c(hebra_compl,nucl)
}
return(hebra_compl)
}
ADN
complementaria(ADN)
Secuencia_ARN<-function(ADN){
cad_arn<-c()
for(i in 1:length(ADN)){
if(ADN[i]=="A"){
nucl<-c("A")
}else if(ADN[i]=="C"){
nucl<-c("C")
}else if(ADN[i]=="G"){
nucl<-c("G")
}else if(ADN[i]=="T"){
nucl<-c("U")
}
cad_arn<-c(cad_arn,nucl)
}
return(cad_arn)
}
ARN<-(Secuencia_ARN(ADN))
ARN
Mar_lect<-function(ARN){
for(i in 3:length(ARN)){
if(ARN[i-2]=="A" & ARN[i-1]=="U" & ARN[i]=="G"){
CI <-c(ARN[i-2],ARN[i-1],ARN[i])
num<-i-2
break
}
}
numero<-seq(num,length(ARN),by=3)
for(j in numero){
if(ARN[j]=="U" & ARN[j+1]=="A" & ARN[j+2]=="A"){
CF <-c(ARN[j],ARN[j+1],ARN[j+2])
num2<-j+2
break
}else if(ARN[j]=="U" & ARN[j+1]=="A" & ARN[j+2]=="G"){
CF <-c(ARN[j],ARN[j+1],ARN[j+2])
num2<-j+2
break
}else if(ARN[j]=="U" & ARN[j+1]=="G" & ARN[j+2]=="A"){
CF <-c(ARN[j],ARN[j+1],ARN[j+2])
num2<-j+2
break
}
}
Prot<-c("")
for(k in num:num2){
Prot<-c(Prot,ARN[k])
Prot
}
Prot<-(Prot[-1])
print(CI)
print(CF)
return(Prot)
}
Marco<-Mar_lect(ARN)
Marco
codones <- c()
i <- 1
j <- 1
while(i < length(Marco)) {
codones[j] <- sprintf("%s%s%s", Marco[i], Marco[i + 1], Marco[i + 2])
j <- j + 1
i <- i + 3
}
traduce <- function(i) {
if(i == "UUU" || i == "UUC") {
print("Phe")
} else if(i == "UUA" || i == "UUG" || i == "CUU" || i == "CUC" || i == "CUA" || i == "CUG") {
print("Leu")
} else if(i == "UCU" || i == "UCC" || i == "UCA" || i == "UCG" || i == "AGU" || i == "AGC") {
print("Ser")
} else if(i == "UAU" || i == "UAC") {
print("Tyr")
} else if(i == "UGU" || i == "UGC") {
print("Cys")
} else if(i == "UGG") {
print("Trp")
} else if(i == "CCU" || i == "CCC" || i == "CCA" || i == "CCG") {
print("Pro")
} else if(i == "CAU" || i == "CAC") {
print("His")
} else if(i == "CAA" || i == "CAG") {
print("Gln")
} else if(i == "CGU" || i == "CGC" || i == "CGA" || i == "CGG" || i == "AGA" || i == "AGG") {
print("Arg")
} else if(i == "AUU" || i == "AUC" || i == "AUA") {
print("Ile")
} else if(i == "AUG") {
print("Met")
} else if(i == "ACU" || i == "ACC" || i == "ACA" || i == "ACG") {
print("Thr")
} else if(i == "AAU" || i == "AAC") {
print("Asn")
} else if(i == "AAA" || i == "AAG") {
print("Lys")
} else if(i == "GUU" || i == "GUC" || i == "GUA" || i == "GUG") {
print("Val")
} else if(i == "GCU" || i == "GCC" || i == "GCA" || i == "GCG") {
print("Ala")
} else if(i == "GAU" || i == "GAC") {
print("Asp")
} else if(i == "GAA" || i == "GAG") {
print("Glu")
} else if(i == "GGU" || i == "GGC" || i == "GGA" || i == "GGG") {
print("Gly")
} else if(i == "UAA" || i == "UAG" || i == "UGA") {
return("STOP")
}
}
for(i in 1:length(codones)) {
codon <- codones[i]
if(traduce(codon) == "STOP") {
print("STOP")
break
}
}
install.packages("viridis")
install.packages("Biostrings")
install.packages("DECIPHER")
installr
install.packages("installr",dependencias=TRUE)
library(installr)
updateR()
updateR()
install.packages("DECIPHER")
install.packages("ade4")
install.packages("seqinr")
install.packages("adegenet")
install.packages("ape")
install.packages("ggtree")
install.packages("ggplot2")
install.packages("ggtree")
library(ape)
library(phytools)
library(Biostrings)
library(DECIPHER)
library(seqinr)
library(ggtree)
library(viridis)
library(ggplot2)
library(ade4)
setwd("/Users/Asus 667639/Downloads/TEC/2do Semestre/Analisis de Biologia Computacional/Arboles_Filogeneticos_A01281202")
("Mexico,Brazil,USA,Canada,Argentina,Chile,Peru,Colombia,Uruguay,Venezuela")
class(virus_sequences)
corona_virus <- c("MT729361","MT710714","MN985325","MW309425","MW553294","MT670013","MT263074","MT256924","MT466071","MT907515")
virus_sequences<-read.GenBank(corona_virus)
class(virus_sequences)
typeof(virus_sequences)
str(virus_sequences)
corona_virus <- c("MT729361","MT710714","MN985325","MW309425","MW553294","MT670013","MT263074","MT256924","MT466071","MT907515")
virus_sequences<-read.GenBank(corona_virus)
virus_seq_align<-AlignSeqs(virus_seq_not_align)
class(virus_sequences)
typeof(virus_sequences)
str(virus_sequences)
write.dna(virus_sequences, file="coronavirus_seqs.fasta",format="fasta")
virus_seq_not_align <- readDNAStringSet("coronavirus_seqs.fasta",format="fasta")
class(virus_seq_not_align)
virus_seq_not_align
virus_seq_not_align<-OrientNucleotides(virus_seq_not_align)
virus_seq_not_align
virus_seq_align<-AlignSeqs(virus_seq_not_align)
virus_seq_align
BrowseSeqs(virus_seq_align)
writeXStringSet(virus_seq_align, file="coronavirus_seq_align.fasta")
virus_aligned <- read.alignment("coronavirus_seq_align.fasta",format="fasta")
virus_aligned
matriz_dist <- dist.alignment(virus_aligned,matrix="similarity")
matriz_dist
temp<-as.data.frame(as.matrix(matriz_dist))
table.paint(temp,cleg=0,clabel.row=.5,clabel.col=.5)+scale_color_viridis()
matriz_dist <- dist.alignment(virus_aligned,matrix="similarity")
matriz_dist
temp<-as.data.frame(as.matrix(matriz_dist))
table.paint(temp,cleg=0,clabel.row=.5,clabel.col=.5)+scale_color_viridis()
matriz_dist <- dist.alignment(virus_aligned,matrix="similarity")
matriz_dist
temp<-as.data.frame(as.matrix(matriz_dist))
table.paint(temp,cleg=0,clabel.row=.5,clabel.col=.5)+scale_color_viridis()
virus_tree <- nj(matriz_dist)
class(virus_tree)
virus_tree
virus_tree <- ladderize(virus_tree)
plot(virus_tree)
ggtree(virus_tree, branch.length='none',layout='circular',)+geom_tiplab()
virus_seq_align<-AlignSeqs(virus_seq_not_align)
virus_seq_align
BrowseSeqs(virus_seq_align)
c -> 5
5 <- c
5 <- c;
7+7
setwd("~/")
my_string <- "my string"
print(my_string)
class(my_string)
x <- 10
class(x)
x <- 10L
class(x)
z <- True
z <- TRUE
z || FALSE
paste ("a", "b")
paste ("a", "b", ... = )
paste ("a", "b", sep = "")
paste0("a", "b")
help(paste)
as.numeric("5.5")
as.logical(0)
print(as.numeric("5.5"))
class(print(as.numeric("5.5")))
gender <- factor(c("male", "female", "male", "female"))
gender
my_var <- NULL
my_var == NULL
is.null(my_var == NULL)
is.null(my_var)
#Vectores
c(1,2,3,4,5)
#Vectores
v <- c(1,2,3,4,5)
class(v)
c(0,v,6,7)
v
c
v[1]
v[1:3]
v[length(v)]
v[length(v)]
v[length(v)]
length(v)
v
v[1] <- 10
v
v[1:2] <- c(100,200)
v
load("C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/prueba.R")
my_string <- "my string"
my_string <- "my string"
my_string <- "my string"
source("C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/prueba.R")
my_string <- "my string"
print(my_string)
class(my_string)
x <- 10L
class(x)
z <- TRUE
z || FALSE
paste ("a", "b", sep = "")
paste0("a", "b")
help(paste)
class(print(as.numeric("5.5")))
as.logical(0)
gender <- factor(c("male", "female", "male", "female"))
gender
my_var <- NULL
is.null(my_var)
#Vectores
v <- c(1,2,3,4,5)
class(v)
c(0,v,6,7)
v[1]
v[1:3]
v[length(v)]
length(v)
v
v[1] <- 10
v
v[1:2] <- c(100,200)
v
class(x)
x <- 10L
x
#Arreglos
my_sequence <- 1:100
seq(1,20,5)
seq
seq
v+1
v+v
v
M <- matrix(nrow = 3, ncol = 3)
M
M <- matrix(1:9, nrow = 3, ncol = 3)
M
M <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
M
M[1,3]
dim(M)
nrow(M)
M[1,3]
M[2:]
M[2,]
M[,3]
M + 1
M*M
M%*%M
M %*% M
View(M)
l <- list(55, c("a","b"), TRUE, list())
length(l)
l[[2[2]]]
l[[2]][2]
l$years <- c(1990, 2000, 2010, 2020)
l
l$years
l[[5]]
l[["years"]]
df <- data.frame(nombre = c("pulpo", "delfin", "tiburon"), longitud = c(0.7, 1.5, 3))
df
df[1,]
df$nombre
df <- iris
head(df)
head(df,13)
View(df)
tail(df,5)
summary(df)
summary(df)
class(df$Species)
boxplot(df$Sepal.length))
boxplot(df$Sepal.length)
boxplot(df$Sepal.Length)
boxplot(df$Sepal.Length~df$Species)
boxplot(df$Sepal.Length~df$Species, col=c(1,2,3))
boxplot(df$Sepal.Length~df$Species, col=c(12,2,3))
boxplot(df$Sepal.Length~df$Species, col=c(12,22,3))
boxplot(df$Sepal.Length~df$Species, col=unique(as.integer(df$Species)))
boxplot(df$Sepal.Length~df$Species, col=1+unique(as.integer(df$Species)))
install.packages("igraph")
library(igraph)
g <- graph(c(1,2, 2,3 2,4 1,4 5,5 3,6), directed = F)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c("a", "b", "c", "d", "e", "f")
node.types <- c(1,2,2,2,2,3)
mapping.colors <- c("gray", "white", "yellow")
node.colors <- mapping.colors[node.types]
set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
node.colors
rug(1:10)
runif(1)
set.seed(123)
runif(1)
g <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6), directed = F)
edge.labels <- c("a", "b", "c", "d", "e", "f")
node.types <- c(1,2,2,2,2,3)
mapping.colors <- c("gray", "white", "yellow")
node.colors <- mapping.colors[node.types]
set.seed(123)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
set.seed(12345)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
set.seed(1111)
plot(g, edge.label = edge.labels, vertex.color = node.colors)
install.packages("shiny")
shiny::runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
shiny::runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
library(shiny)
library(igraph)
library(visNetwork)
library(stringr)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Regular Grammar to Automaton"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textAreaInput("text", "Enter your grammar to convert into an Automaton"),
),
# Show a plot of the generated distribution
mainPanel(
uiOutput("inputText"),
plotOutput("Converter")
)
)
)
# Define server logic required to draw a histogram
output$inputText <- renderUI({
HTML(paste("<pre>", input$text, "</pre>", sep = "\n"))
})
output$Converter <- renderPlot({
lines <- strsplit(input$text, "\n")
for(i in lines){
print(substr(i,1,1))
print(substr(i,nchar(i)-1,nchar(i)-1))
print(substr(i,nchar(i), nchar(i))
}
runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
runApp('C:/Users/cesar/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/4to Semestre/Implementación de metodos computacionales/R/Converter/Converter')
